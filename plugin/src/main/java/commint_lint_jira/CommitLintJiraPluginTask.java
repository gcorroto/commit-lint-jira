/*
 * This Java source file was generated by the Gradle 'init' task.
 */
package commint_lint_jira;

import commint_lint_jira.dto.CommitLintJiraRestModel;
import commint_lint_jira.dto.ResponseJiraDto;
import commint_lint_jira.exception.BranchNameException;
import commint_lint_jira.exception.CommitException;
import commint_lint_jira.exception.JiraException;
import commint_lint_jira.rest.CommitLintJiraRest;
import java.io.BufferedReader;
import java.io.File;
import java.io.FileNotFoundException;
import java.io.FileReader;
import java.io.IOException;
import java.util.Scanner;
import org.apache.commons.lang3.StringUtils;
import org.gradle.api.DefaultTask;
import org.gradle.api.provider.Property;
import org.gradle.api.tasks.Input;
import org.gradle.api.tasks.TaskAction;
import org.gradle.api.tasks.TaskExecutionException;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

/**
 * A simple 'hello world' plugin.
 */
public abstract class CommitLintJiraPluginTask extends DefaultTask {

  private final Logger log = LoggerFactory.getLogger(this.getClass());

  @Input
  public abstract Property<String> getUser();

  @Input
  public abstract Property<String> getPassword();

  @Input
  public abstract Property<String> getDomain();

  @Input
  public abstract Property<String> getUrl();

  @TaskAction
  public void samplePluginTasks() throws TaskExecutionException {
    log.error("Inicio CommitLint Jira");

    try {
      CommitLintJiraRestModel extension = new CommitLintJiraRestModel(
        getUser().get(),
        getPassword().get(),
        getDomain().get(),
        getUrl().get()
      );

      String keyJira = "";
      String msgfile = System.getProperty("msgfile");
      String project = System.getProperty("user.dir");
      File fileBranch = new File(project + "/.git/HEAD");
      String refBranch = readFile(fileBranch);
      CommitLintJiraRest rest = new CommitLintJiraRest(extension);

      System.out.println("Trabajando desde la rama " + refBranch);

      if (!refBranch.contains("refs/heads/feature")) {
        log.error("Este commit no es sobre una feature salimos del plugin");
        return;
      }

      if (rest.authJira()) {
        File fileCommit = new File(project + "/.git/COMMIT_EDITMSG");

        keyJira = extractKeyJira(readFile(fileCommit));
        if (StringUtils.isEmpty(keyJira)) {
          throw new Exception(
            "no se ha encontrado id de la tarea de jira, msgfile = [" +
            msgfile +
            "], file [" +
            fileCommit.getAbsolutePath() +
            "]"
          );
        }
        validBranch(refBranch, keyJira);
        ResponseJiraDto response = rest.getInfoJira(keyJira);
        validResponseJira(response, keyJira);
      }

      // eliminar para funcionar
      throw new TaskExecutionException(
        this,
        new Exception("Successfully completed sample Task : " + keyJira)
      );
    } catch (Exception e) {
      log.error(e.getMessage(), e);

      throw new TaskExecutionException(
        this,
        new Exception("[ERROR]: Error al procesar el commit ", e)
      );
    }
  }

  private String extractKeyJira(String msg) {
    if (msg.contains(" ")) {
      msg = msg.split(" ")[0];
    }
    return msg.trim().toUpperCase();
  }

  private String readFile(File file) throws IOException {
    StringBuilder texto = new StringBuilder("");
    try {
      Scanner myReader = new Scanner(file);
      while (myReader.hasNextLine()) {
        String data = myReader.nextLine();
        System.out.println("leyendo linea " + data);
        if (!StringUtils.isEmpty(data)) {
          texto.append(data);
        }
      }
      myReader.close();
    } catch (FileNotFoundException e) {
      System.out.println("An error occurred.");
      e.printStackTrace();
    }
    System.out.println("total lectura commit " + texto.toString());
    return texto.toString();
  }

  private void validBranch(String refBranch, String keyJira)
    throws BranchNameException {
    if (!refBranch.contains(keyJira)) {
      throw new BranchNameException(
        "no se ha encontrado la feature con formato feature/" +
        keyJira +
        " el commit se realiza en [" +
        refBranch +
        "]"
      );
    } else {
      System.out.println(
        "Successfully READ COMMIT " + keyJira + " para la feature " + refBranch
      );
    }
  }

  private void validResponseJira(ResponseJiraDto response, String keyJira)
    throws JiraException, CommitException {
    if (response != null) {
      String estado = response.getFields().getStatus().getName();
      System.out.println("Estado de la tarea " + keyJira + " = " + estado);
      if (estado.equalsIgnoreCase("WIP")) {
        System.out.println(
          "Successfully completed sample Task infoJira " + response.toString()
        );
      } else {
        throw new JiraException(
          "La tarea " +
          keyJira +
          " no se encuentra en estado WIP se encuentra en " +
          estado
        );
      }
    } else {
      // log.error(
      //   "Successfully completed sample Task infoJira but response is NULL WITH KEY " +
      //   keyJira
      // );
      throw new CommitException(
        "Successfully completed sample Task infoJira but response is NULL WITH KEY " +
        keyJira
      );
    }
  }
}
